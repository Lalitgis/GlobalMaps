# -*- coding: utf-8 -*-
"""Wildlife_mapping.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NZ691Zs_T58cZymCgSeQh1gKH5RG476F
"""

import geopandas as gpd # version: 0.9.0

gdf_iucn = gpd.read_file('/content/data/CROCODILES_ALLIGATORS.shp')
print('Number of records: ', len(gdf_iucn))
print('Number of attributes: ', len(gdf_iucn.keys()))
gdf_iucn.head(3)

print(len(set(gdf_iucn.id_no)))
print(len(set(gdf_iucn.sci_name)))

from collections import Counter

for a in ['kingdom', 'phylum', 'class', 'order_', 'family', 'genus']:
    print(a, Counter(gdf_iucn[[a, 'sci_name']].drop_duplicates()[a].to_list()).most_common(3), len(set(gdf_iucn[a])))

gdf_iucn[gdf_iucn.genus=='Crocodylus'].head(10)

gdf_iucn.shape

gdf_iucn[['presence', 'origin', 'seasonal', 'legend']].head(5)

import matplotlib.pyplot as plt
from collections import Counter

def get_distribution(x):
    return list(zip(*[(k, v) for k, v in Counter(x.to_list()).most_common()]))

f, ax = plt.subplots(1,3,figsize = (15,4))

for idx, feat in enumerate(['presence', 'origin', 'seasonal']):
    values, frequencies = get_distribution(gdf_iucn[feat])
    ax[idx].bar(values, frequencies)
    ax[idx].set_yscale('log')
    ax[idx].set_title(feat)

fig, ax = plt.subplots(1,1,figsize = (15,5))

values, frequencies = get_distribution(gdf_iucn['legend'])
ax.bar(values, frequencies)
ax.set_title('Frequency of habitat-characteristics', fontsize = 20)
ax.set_yscale('log')
ax.set_xticks(range(len(values)))
ax.set_xticklabels(values, rotation = 60, ha = 'right')
plt.show()

Counter(gdf_iucn.compiler).most_common(5)

Counter(gdf_iucn.source).most_common(5)

min(gdf_iucn.yrcompiled), max(gdf_iucn.yrcompiled)

f, ax = plt.subplots(1,1,figsize = (15,5))

ax.set_title('The number of records per year', fontsize = 20)
values, frequencies = get_distribution(gdf_iucn['yrcompiled'])
ax.bar(values, frequencies)

category_d = {  'EX' : 'Extinct',
                'EW' : 'Extinct in The Wild',
                'RE' : 'Regionally Extinct',
                'CR' : 'Critically Endangered',
                'EN' : 'Endangered',
                'VU' : 'Vulnerable',
                'DD' : 'Data Deficient',
                'LC' : 'Least Concern',
                'NT' : 'Not Threatened'
     }

gdf_iucn['category'] = gdf_iucn['category'].map(category_d)

Counter(gdf_iucn[['sci_name', 'category']].drop_duplicates().category).most_common()



sorted(set(gdf_iucn[gdf_iucn.category.isin(['Critically Endangered', 'Vulnerable','Endangered'])].sci_name.to_list()))

gdf_iucn.dtypes

def get_color(x):
    if x in ['Critically Endangered', 'Endangered', 'Vulnerable']:
        return 'red'
    elif x in ['Least Concern']:
        return 'k'
    else:
        return 'green'

# Create subplots
f, ax = plt.subplots(1, 2, figsize=(12, 6))

# Set titles for subplots
ax[0].set_title('The number of species by category', fontsize=20, pad=20)
ax[1].set_title('Log scale of the number of species by category', fontsize=20, pad=20)

# Get distribution of categories
values, frequencies = get_distribution(gdf_iucn[['sci_name', 'category']].drop_duplicates().category)

# Ensure values are strings and colors are valid
values = [str(v) for v in values]  # Convert all values to strings
colors = [get_color(v) for v in values]

# Plotting on the first subplot
ax[0].bar(values, frequencies, color=colors)
ax[0].set_xticks(range(len(values)))
ax[0].set_xticklabels(values, rotation=60, ha='right')
ax[0].set_xlabel('Category')
ax[0].set_ylabel('Number of Species')

# Plotting on the second subplot
ax[1].bar(values, frequencies, color=colors)
ax[1].set_xticks(range(len(values)))
ax[1].set_xticklabels(values, rotation=60, ha='right')
ax[1].set_yscale('log')
ax[1].set_xlabel('Category')
ax[1].set_ylabel('Number of Species (Log Scale)')

# Adjust layout to fit titles and labels
plt.tight_layout()

# Display the plots
plt.show()

# Assuming gdf_iucn is your GeoDataFrame and 'Shape_Area' is the column you want to sum

# Filter out only the numeric columns for aggregation
numeric_cols = gdf_iucn.select_dtypes(include=['number']).columns

# Group by 'sci_name' and aggregate only numeric columns
# Note: You might want to explicitly specify the column 'Shape_Area' if needed
grouped = gdf_iucn.groupby(by='sci_name')[numeric_cols].sum()

# Sort values by 'Shape_Area' and display the top 10
top_10_species = grouped.sort_values(by='Shape_Area', ascending=False).head(10)

print(top_10_species)

top_10_species.groupby(by = 'sci_name').sum().sort_values(by = 'Shape_Area').head(10).index.to_list()

top_10_species.groupby(by = 'sci_name').sum().sort_values(by = 'Shape_Area', ascending = False).head(10).index.to_list()

# transform the coordinate reference system
gdf_iucn_t = gdf_iucn.copy()
gdf_iucn_t = gdf_iucn_t.to_crs('+proj=moll +lon_0=0 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs')

f, ax = plt.subplots(1,1,figsize=(15,10))
gdf_iucn_t.sample(31).plot(ax=ax, edgecolor = 'k', linewidth = 0.5, alpha = 0.5, cmap = 'tab20')

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# !pip install contextily

print(gdf_iucn_t.crs)

gdf_iucn_t = gdf_iucn_t.to_crs(epsg=3857)

# Convert GeoDataFrame to EPSG:3857 for compatibility with contextily
gdf_iucn_t = gdf_iucn_t.to_crs(epsg=3857)

# Plot the GeoDataFrame
f, ax = plt.subplots(1, 1, figsize=(15, 10))
gdf_iucn_t.plot(ax=ax, edgecolor='k', linewidth=0.5, alpha=0.15, cmap='tab20')

# Add basemap with contextily
ctx.add_basemap(ax, alpha=0.8, crs=gdf_iucn_t.crs.to_string(), source=ctx.providers.Esri.WorldPhysical)

# Adjust axis and remove borders
ax.axis('off')
ax.set_ylim([-9.5*10**6, 9.5*10**6])
plt.show()

f, ax = plt.subplots(1,1,figsize=(15,10))
gdf_iucn_t.plot(ax=ax, edgecolor = 'k', linewidth = 0.5, alpha = 0.15, cmap = 'tab20')
ctx.add_basemap(ax=ax, alpha = 0.8, crs = gdf_iucn_t.crs, url = ctx.providers.Esri.WorldGrayCanvas)
ax.axis('off')
ax.set_ylim([-9.5*10**6, 9.5*10**6])
plt.savefig('worldmap_habitats_WorldGrayCanvas.png', dpi = 600, bbox_inches = 'tight')

gdf_iucn[gdf_iucn.genus.str.contains('Crocodylus')].head(5)

f, ax = plt.subplots(1,1,figsize=(15,10))
gdf_iucn[gdf_iucn.sci_name=='Crocodylus acutus'].plot(ax=ax, edgecolor = 'black', linewidth = 0.5, alpha = 0.9, color = 'red')
ax.axis('off')

# ax.set_xlim([-5, 55])
# ax.set_ylim([-38, 15])
ax.set_title('The habitat patches of Crocodylus acutus (Crocodile)', fontsize = 18, y = 1.03)

ctx.add_basemap(ax=ax, alpha = 0.8, crs = gdf_iucn.crs, url = ctx.providers.Esri.WorldPhysical)
plt.savefig('1_crocodile.png', dpi = 200)

